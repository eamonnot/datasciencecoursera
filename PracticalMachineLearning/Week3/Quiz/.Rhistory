abline(v=1322, col="blue")
abline(v=1369, col="blue")
plot.ts(filter(butter(2,1/90, typer="low"), c1FilterDiff))
plot.ts(filter(butter(2,1/10, typer="low"), c1FilterDiff))
c1Low <- c1FilterDiff
c1High <- c1FilterDiff
for(i in 1: length(c1Low)){
+ if(c1Low[i] > 0) c1Low[i] = 0
+ }
for(i in 1: length(c1Low)){
if(c1Low[i] > 0) c1Low[i] = 0
}
for(i in 1: length(c1High)){
if(c1High[i] < 0) c1High[i] = 0
}
c1Low <- c1Low * -1
c1All <- c1FilterDiff
c1All <- abs(c1FilterDiff)
m1 <- mean (c1All)
findpeaks(c1High, minpeakheight=m1)
findpeaks(c1High[1:1399], minpeakheight=m1)
findpeaks(c1Low[1:1399], minpeakheight=m1)
findpeaks(c1Low[1:1399], minpeakheight=m1*1.5)
findpeaks(c1High[1:1399], minpeakheight=m1*1.5)
findpeaks(c1High[1:1399], minpeakheight=m1*2)
findpeaks(c1Low[1:1399], minpeakheight=m1*2)
abline(v=337, col="red")
abline(v=395, col="red")
abline(v=429, col="red")
abline(v=468, col="red")
abline(v=525, col="red")
abline(v=816, col="red")
abline(v=878, col="red")
abline(v=570, col="green")
abline(v=657, col="green")
plot.ts(filter(butter(2, 1/50, type="low"),c1))
plot.ts(filter(butter(2, 1/30, type="low"),c1))
plot.ts(filter(butter(2, 1/60, type="low"),c1))
plot.ts(filter(butter(2, 1/70, type="low"),c1))
plot.ts(filter(butter(2, 1/40, type="low"),c1))
plot.ts(filter(butter(2, 1/50, type="low"),c1))
plot.ts(filter(butter(4, 1/50, type="low"),c1))
plot.ts(filter(butter(4, 1/30, type="low"),c1))
plot.ts(filter(butter(4, 1/40, type="low"),c1))
plot.ts(filter(butter(4, 1/45, type="low"),c1))
plot.ts(filter(butter(4, 1/40, type="low"),c1))
plot.ts(filter(butter(2, 1/50, type="low"),c1))
plot.ts(diff(filter(butter(2, 1/50, type="low"),c1)))
plot.ts(filter(butter(2, 1/50, type="low"),diff(filter(butter(4, 1/40, type="low"),c1))))
plot.ts(filter(butter(2, 1/30, type="low"),diff(filter(butter(4, 1/40, type="low"),c1))))
plot.ts(filter(butter(2, 1/40, type="low"),diff(filter(butter(4, 1/40, type="low"),c1))))
plot.ts(filter(butter(4, 1/40, type="low"),diff(filter(butter(4, 1/40, type="low"),c1))))
plot.ts(filter(butter(2, 1/10, type="low"),diff(filter(butter(4, 1/40, type="low"),c1))))
plot.ts(filter(butter(2, 1/15, type="low"),diff(filter(butter(4, 1/40, type="low"),c1))))
plot.ts(filter(butter(2, 1/20, type="low"),diff(filter(butter(4, 1/40, type="low"),c1))))
plot.ts(filter(butter(2, 1/10, type="low"),diff(filter(butter(4, 1/40, type="low"),c1))))
plot.ts(filter(butter(2, 1/50, type="low"),diff(filter(butter(4, 1/40, type="low"),c1))))
plot.ts(filtfilt(butter(2, 1/50, type="low"),diff(filtfilt(butter(4, 1/40, type="low"),c1))))
plot.ts(filtfilt(butter(2, 1/10, type="low"),diff(filtfilt(butter(4, 1/40, type="low"),c1))))
plot.ts(filtfilt(butter(2, 1/50, type="low"),diff(filtfilt(butter(4, 1/40, type="low"),c1))))
plot.ts(filtfilt(butter(2, 1/50, type="low"),diff(filtfilt(butter(2, 1/40, type="low"),c1))))
plot.ts(filtfilt(butter(2, 1/10, type="low"),diff(filtfilt(butter(2, 1/40, type="low"),c1))))
plot.ts(filtfilt(butter(2, 1/10, type="low"),diff(filtfilt(butter(4, 1/40, type="low"),c1))))
plot.ts(filtfilt(butter(4, 1/10, type="low"),diff(filtfilt(butter(4, 1/40, type="low"),c1))))
plot.ts(filtfilt(butter(2, 1/20, type="low"),diff(filtfilt(butter(4, 1/40, type="low"),c1))))
plot.ts(filtfilt(butter(2, 1/30, type="low"),diff(filtfilt(butter(4, 1/40, type="low"),c1))))
plot.ts(filtfilt(butter(2, 1/15, type="low"),diff(filtfilt(butter(4, 1/40, type="low"),c1))))
abline(h=0,col="blue")
mean(abs(filtfilt(butter(2, 1/15, type="low"),diff(filtfilt(butter(4, 1/40, type="low"),c1)))))
abline(h=0.273,col="red")
abline(h=-0.273,col="red")
ls
View(congest)
plot.ts(congest$Congestion)
plot.ts(smooth.exp(congest$Congestion,.4))
library(itsmr)
install.library("itsmr")
install.packages("itsmr")
library(itsmr)
plot.ts(smooth.exp(congest$Congestion,.4))
c <- smooth.exp(congest$Congestion,.4)
library(signal)
cheby1(c,4,10,0.7)
expFiltx <- smooth.exp(congest$Congestion,.4)
cy <- cheby1(4,10,0.7,type="pass")
sigCyExFiltx <- filtfilt(cy, x = expFiltx)
plot.ts(sigCyExFiltx)
help(cheby1)
cy <- cheby1(4,10,0.7,type="low")
sigCyExFiltx <- filtfilt(cy, x = expFiltx)
plot.ts(sigCyExFiltx)
freqz(cy)
cy
cypass <- cheby1(4,10,0.7,type="pass")
freqz(cypass)
cypass <- cheby1(4,10,0.7,type="high")
freqz(cypass)
cypass <- cheby1(4,10,0.7,type="pass")
freqz(cypass)
sigCyExFiltx <- filt(cy, x = expFiltx)
sigCyExFiltx <- filter(cy, x = expFiltx)
plot.ts(sigCyExFiltx)
plot.ts(expFiltx)
plot.ts(diff(sigCyExFiltx))
diffX <- diff(sigCyExFiltx)
peaksR <- findpeaks(diffX, minpeakheight=mean(diffX * 1.5))
library(pracma)
peaksR <- findpeaks(diffX, minpeakheight=mean(diffX * 1.5))
class(diffX)
peaksR <- findpeaks(as.numeric(diffX), minpeakheight=mean(diffX * 1.5))
peaksR
load(eamonnFunc)
library(eamonnFunc)
bf2 <- butter(2, 1/15, type="low")
filteredDiffX <- filtfilt(bf2, as.numeric(diffX))
plot.ts(filteredDiffX)
bf <- butter(4, 1/40, type="low")
filteredX <- filtfilt(bf,congest$Congestion)
diffX2 <- diff(filteredX)
filteredDiffX2 <- filtfilt(bf2, diffX2)
plot.ts(filteredDiffX2)
plot.ts(congest$Congestion)
bf2 <- butter(2, 1/40, type="low")
filteredDiffX <- filtfilt(bf2, as.numeric(diffX))
plot.ts(filteredDiffX)
cy2 <- cheby1(4,10,0.7,type="low")
filteredDiffX <- filtfilt(cy2, as.numeric(diffX))
plot.ts(filteredDiffX)
cy2 <- cheby1(8,5,0.8,type="low")
filteredDiffX <- filtfilt(cy2, as.numeric(diffX))
plot.ts(filteredDiffX)
cy2 <- cheby1(10,5,0.8,type="low")
filteredDiffX <- filtfilt(cy2, as.numeric(diffX))
plot.ts(filteredDiffX)
cy2 <- cheby1(8,5,0.2,type="low")
filteredDiffX <- filtfilt(cy2, as.numeric(diffX))
plot.ts(filteredDiffX)
cy2 <- cheby1(8,0,0.2,type="low")
cy2 <- cheby1(8,1,0.2,type="low")
filteredDiffX <- filtfilt(cy2, as.numeric(diffX))
plot.ts(filteredDiffX)
cy2 <- cheby1(8,0.1,0.2,type="low")
filteredDiffX <- filtfilt(cy2, as.numeric(diffX))
plot.ts(filteredDiffX)
cy2 <- cheby1(8,0.1,1/40,type="low")
filteredDiffX <- filtfilt(cy2, as.numeric(diffX))
plot.ts(filteredDiffX)
cy2 <- cheby1(8,1,1/40,type="low")
filteredDiffX <- filtfilt(cy2, as.numeric(diffX))
plot.ts(filteredDiffX)
cy2 <- cheby1(4,1,1/40,type="low")
filteredDiffX <- filtfilt(cy2, as.numeric(diffX))
plot.ts(filteredDiffX)
cy2 <- cheby1(4,5,1/40,type="low")
filteredDiffX <- filtfilt(cy2, as.numeric(diffX))
plot.ts(filteredDiffX)
cy2 <- cheby1(4,5,1/20,type="low")
filteredDiffX <- filtfilt(cy2, as.numeric(diffX))
plot.ts(filteredDiffX)
cy2 <- cheby1(4,5,1/30,type="low")
filteredDiffX <- filtfilt(cy2, as.numeric(diffX))
plot.ts(filteredDiffX)
cy2 <- cheby1(8,5,1/30,type="low")
filteredDiffX <- filtfilt(cy2, as.numeric(diffX))
plot.ts(filteredDiffX)
cy2 <- cheby1(8,10,1/30,type="low")
filteredDiffX <- filtfilt(cy2, as.numeric(diffX))
plot.ts(filteredDiffX)
cy2 <- cheby1(8,0.1,0.2,type="low")
filteredDiffX <- filtfilt(cy2, as.numeric(diffX))
plot.ts(filteredDiffX)
expFiltx2 <- smooth.exp(filteredDiffX,.4)
cy2 <- cheby1(8,0.1,0.2,type="low")
filteredDiffX <- filtfilt(cy2, as.numeric(expFiltx2))
plot.ts(filteredDiffX)
cy2 <- cheby1(8,5,0.2,type="low")
filteredDiffX <- filtfilt(cy2, as.numeric(expFiltx2))
plot.ts(filteredDiffX)
cy2 <- cheby1(8,0.1,0.05,type="low")
filteredDiffX <- filtfilt(cy2, as.numeric(expFiltx2))
plot.ts(filteredDiffX)
cy2 <- cheby1(8,5,0.2,type="low")
filteredX <- filtfilt(cy2, congest$Congestion)
plot.ts(filteredX)
cy2 <- cheby1(8,5,0.5,type="low")
filteredX <- filtfilt(cy2, congest$Congestion)
plot.ts(filteredX)
cy2 <- cheby1(4,5,0.5,type="low")
filteredX <- filtfilt(cy2, congest$Congestion)
plot.ts(filteredX)
cy2 <- cheby1(4,1,0.5,type="low")
filteredX <- filtfilt(cy2, congest$Congestion)
plot.ts(filteredX)
cy2 <- cheby1(4,0.1,0.5,type="low")
filteredX <- filtfilt(cy2, congest$Congestion)
plot.ts(filteredX)
cy2 <- cheby1(4,0.1,0.4,type="low")
filteredX <- filtfilt(cy2, congest$Congestion)
plot.ts(filteredX)
cy2 <- cheby1(4,0.1,0.2,type="low")
filteredX <- filtfilt(cy2, congest$Congestion)
plot.ts(filteredX)
cy2 <- cheby1(4,0.1,0.05,type="low")
filteredX <- filtfilt(cy2, congest$Congestion)
plot.ts(filteredX)
cy2 <- cheby1(4,0.1,0.01,type="low")
filteredX <- filtfilt(cy2, congest$Congestion)
plot.ts(filteredX)
cy2 <- cheby1(4,0.1,0.06,type="low")
filteredX <- filtfilt(cy2, congest$Congestion)
plot.ts(filteredX)
cy2 <- cheby1(4,0.2,0.05,type="low")
filteredX <- filtfilt(cy2, congest$Congestion)
plot.ts(filteredX)
cy2 <- cheby1(4,0.05,0.05,type="low")
filteredX <- filtfilt(cy2, congest$Congestion)
plot.ts(filteredX)
cy2 <- cheby1(2,0.05,0.05,type="low")
filteredX <- filtfilt(cy2, congest$Congestion)
plot.ts(filteredX)
cy2 <- cheby1(8,0.05,0.05,type="low")
filteredX <- filtfilt(cy2, congest$Congestion)
plot.ts(filteredX)
cy2 <- cheby1(8,0.05,0.1,type="low")
filteredX <- filtfilt(cy2, congest$Congestion)
plot.ts(filteredX)
cy2 <- cheby1(8,0.1,0.05,type="low")
filteredX <- filtfilt(cy2, congest$Congestion)
plot.ts(filteredX)
cy2 <- cheby1(4,0.1,0.01,type="low")
filteredX <- filtfilt(cy2, congest$Congestion)
plot.ts(filteredX)
cy2 <- cheby1(4,0.1,0.1,type="low")
filteredX <- filtfilt(cy2, congest$Congestion)
plot.ts(filteredX)
cy2 <- cheby1(4,0.1,0.15,type="low")
filteredX <- filtfilt(cy2, congest$Congestion)
plot.ts(filteredX)
expFilt <- smooth.exp(filteredX, 0.4)
plot.ts(expFilt)
expFilt <- smooth.exp(filteredX, 0.1)
plot.ts(expFilt)
expFilt <- smooth.exp(filteredX, 0.05)
plot.ts(expFilt)
expFilt <- smooth.exp(filteredX, 0.08)
plot.ts(expFilt)
plot.ts(diff(expFilt))
diffExFilt <- diff(expFilt)
filteredDiff <- filtfilt(cy2, diffExFilt)
plot.ts(filteredDiff)
plot.ts(smooth.exp(filteredDiff, 0.08))
plot.ts(smooth.exp(filteredDiff, 0.01))
plot.ts(smooth.exp(filteredDiff, 0.05))
plot.ts(filteredDiff)
cy3 <- cheby1(4,0.1,0.3,type="low")
filteredDiff <- filtfilt(cy3, diffExFilt)
plot.ts(filteredDiff)
cy3 <- cheby1(4,0.1,1,type="low")
filteredDiff <- filtfilt(cy3, diffExFilt)
plot.ts(filteredDiff)
cy3 <- cheby1(4,0.1,0.05,type="low")
filteredDiff <- filtfilt(cy3, diffExFilt)
plot.ts(filteredDiff)
cy3 <- cheby1(4,0.1,0.01,type="low")
filteredDiff <- filtfilt(cy3, diffExFilt)
plot.ts(filteredDiff)
cy3 <- cheby1(4,0.1,0.025,type="low")
filteredDiff <- filtfilt(cy3, diffExFilt)
plot.ts(filteredDiff)
cy3 <- cheby1(4,0.1,0.02,type="low")
filteredDiff <- filtfilt(cy3, diffExFilt)
plot.ts(filteredDiff)
cy3 <- cheby1(4,0.1,0.03,type="low")
filteredDiff <- filtfilt(cy3, diffExFilt)
plot.ts(filteredDiff)
cy3 <- cheby1(4,0.1,0.04,type="low")
filteredDiff <- filtfilt(cy3, diffExFilt)
plot.ts(filteredDiff)
cy3 <- cheby1(4,1,0.04,type="low")
filteredDiff <- filtfilt(cy3, diffExFilt)
plot.ts(filteredDiff)
cy3 <- cheby1(4,5,0.04,type="low")
filteredDiff <- filtfilt(cy3, diffExFilt)
plot.ts(filteredDiff)
cy3 <- cheby1(4,5,0.01,type="low")
filteredDiff <- filtfilt(cy3, diffExFilt)
cy3 <- cheby1(4,5,0.01,type="low")
changeP(congest$Congestion)
abline(v=307, col="green")
abline(v=391, col="green")
abline(v=401, col="green")
abline(v=488, col="green")
abline(v=780, col="green")
abline(v=859, col="green")
abline(v=536, col="red")
abline(v=624, col="red")
abline(v=1072, col="red")
abline(v=1158, col="red")
bf <- butter(4, 1/40, type="low")
filteredX <- filtfilt(bf,congest$Congestion)
plot.ts(filteredX)
plot.ts(diff(filteredX))
congest2 <- read.table("~/congest2.csv", header=TRUE, quote="\"")
View(congest2)
filteredX2 <- filtfilt(bf,congest2$Congestion)
plot.ts(filteredX2)
plot.ts(congest2$Congestion)
plot.ts(filteredX2)
install.packages("KernSmooth")
library(KernSmooth)
library(eamonnFunc)
RunSummRun52 <- read.csv("~/netlogo/EmergenceTests/Traffic2/Summary/RunSummRun52.csv")
View(RunSummRun52)
changeP(RunSummRun52$Object)
plot.ts(RunSummRun52$Object)
abline(v=262, col="red")
abline(v=515, col="red")
abline(v=617, col="red")
abline(v=690, col="red")
abline(v=797, col="red")
abline(v=902, col="red")
abline(v=953, col="red")
abline(v=1003, col="red")
abline(v=519, col="blue")
abline(v=609, col="blue")
abline(v=737, col="blue")
abline(v=796, col="blue")
abline(v=905, col="blue")
abline(v=952, col="blue")
abline(v=1004, col="blue")
abline(v=1068, col="blue")
lines(RunSummRun52$Change, col="green")
lines(RunSummRun52$Emerge, col="yellow")
library(devtools)
ageLasso <- read.csv("~/ageLasso.csv")
View(ageLasso)
XGroup<-cbind(ageLasso$BirdsNear,ageLasso$DistNear,ageLasso$FlockHead,ageLasso$FlockSpeed,ageLasso$Temperature)
lassoRun.cv<-cv.glmnet(XGroup,ageLasso$Age)
library(glmnet)
lassoRun.cv<-cv.glmnet(XGroup,ageLasso$Age)
lassofit<-glmnet(XGroup,y,alpha=1,nlambda=100)
lassofit<-glmnet(XGroup,ageLasso$Age,alpha=1,nlambda=100)
lassopred<-predict(lassofit,XGroup,s=lassoRun.cv$lambda.min)
lassocoef<-predict(lassofit,s=lassoRun.cv$lambda.min,type="coefficients")
lassocoef[2,1]
lassocoef[3,1]
lassocoef[4,1]
lassocoef[5,1]
lassocoef
with(ageLasso,plot(Age~BirdsNear))
with(ageLasso,plot(Age~DistNear))
with(ageLasso,plot(Age~FlockHead))
with(ageLasso,plot(Age~FlockSpeed))
with(ageLasso,plot(Age~Temperature))
lassocoef[6,1]
plot(lassoRun.cv)
plot(lassofit)
lassopred
lassofit
summary(lassofit)
plot(lassofit,xvar="lambda")
plot(lassoRun.cv)
lassoRun.cv$lambda.min
install.packages("lars")
require(lars)
data(diabetes)
cv.res <- cv.lars(diabetes$x,diabetes$y,type="lasso", mode="fraction", plot=FALSE)
opt.frac <- min(cv.res$cv) + sd(cv.res$cv)
opt.frac <- cv.res$index[which(cv.res$cv > opt.frac)[1]]
lasso.path <- lars(diabetes$x,diabetes$y, type="lasso")
lasso.fit <- predict.lars(lasso.path, type="coefficients", mode="fraction", s = opt.frac)
coef(lasso.fit)
opt.frac <- cv.res$index[which(cv.res$cv < opt.frac)[1]]
lasso.path <- lars(diabetes$x,diabetes$y, type="lasso")
lasso.fit <- predict.lars(lasso.path, type="coefficients", mode="fraction", s = opt.frac)
coef(lasso.fit)
plot(lassofit, xvar="lambda", label = TRUE)
lassoRun.cv$lambda.min
log(lassoRun.cv$lambda.min)
plot(lassofit, xvar="dev", label = TRUE)
coef(lassoRun.cv, s="lambda.min")
fit.lasso.cv2 <- cv.glmnet(XGroup,ageLasso$Age,alpha=1,nlambda=100, type.measure = "mse")
coef(fit.lasso.cv2, s="lambda.min")
lm(ageLasso$Age, ageLasso$BirdsNear)
lm(ageLasso$Age ~ ageLasso$BirdsNear)
summary(lm(ageLasso$Age ~ ageLasso$BirdsNear))
summary(lm(ageLasso$Age ~ ageLasso$DistNear))
summary(lm(ageLasso$Age ~ ageLasso$FlockHead))
plot(lm(ageLasso$Age ~ ageLasso$FlockHead))
summary(lm(ageLasso$Age ~ ageLasso$FlockSpeed))
summary(lm(ageLasso$Age ~ ageLasso$Temperature))
summary(lm(ageLasso$Age ~ ageLasso$BirdsNear+ ageLasso$DistNear + ageLasso$FlockHead + ageLasso$FlockSpeed + ageLasso$Temperature))
plot(lm(ageLasso$Age ~ ageLasso$BirdsNear+ ageLasso$DistNear + ageLasso$FlockHead + ageLasso$FlockSpeed + ageLasso$Temperature))
heightLasso <- read.csv("~/heightLasso.csv")
View(heightLasso)
XGroup<-with(heightLasso,cbind(BirdsNear,DistNear,FlockHead,FlockSpeed,Temperature))
lassoRun.cv<-cv.glmnet(XGroup,heightLasso$Height)
lassofit<-glmnet(XGroup,heightLasso$Height,alpha=1,nlambda=100)
lassopred<-predict(lassofit,XGroup,s=lassoRun.cv$lambda.min)
lassocoef<-predict(lassofit,s=lassoRun.cv$lambda.min,type="coefficients")
lassocoef[2,1]
lassocoef[3,1]
lassocoef[4,1]
lassocoef[5,1]
lassocoef[6,1]
lassocoef[6,1]
install.packages("rattle")
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
training <- segmentationOriginal[segmentationOriginal$Case=="Train",]
testing <- segmentationOriginal[segmentationOriginal$Case=="Test",]
set.seed(125)
training <- training[,-2]
testing <- testing[,-2]
model <- train(Class ~., method="rpart",data=training)
print(model$finalModel)
predict(model,newdata=testing)
all.columns <- mapply(function(x) NA, names(training), USE.NAMES = T)
rep1
make.obs <- function(repl){
# replace NAs in all.columns with data from repl and return as data.frame
data.frame(t(replace(all.columns, names(repl), repl)))
}
newdata.example <- make.obs(c(TotalIntench2 = 23000, FiberWidthCh1 = 10, PerimStatusCh1 = 2))
predict(model,newdata=newdata.example)
pred <- predict(model,newdata=newdata.example)
pred
pred$
r
newdata.example
View(newdata.example)
training <- segmentationOriginal[segmentationOriginal$Case=="Train",]
testing <- segmentationOriginal[segmentationOriginal$Case=="Test",]
model <- train(Class ~., method="rpart",data=training)
set.seed(125)
model <- train(Class ~., method="rpart",data=training)
pred <- predict(model,newdata=newdata.example)
all.columns <- mapply(function(x) NA, names(training), USE.NAMES = T)
make.obs <- function(repl){
+     # replace NAs in all.columns with data from repl and return as data.frame
+     data.frame(t(replace(all.columns, names(repl), repl)))
+ }
make.obs <- function(repl){
+     # replace NAs in all.columns with data from repl and return as data.frame
+     data.frame(t(replace(all.columns, names(repl), repl)))
+ }
make.obs <- function(repl){
# replace NAs in all.columns with data from repl and return as data.frame
data.frame(t(replace(all.columns, names(repl), repl)))
}
newdata.example <- make.obs(c(TotalIntench2 = 23000, FiberWidthCh1 = 10, PerimStatusCh1 = 2))
predict(model,newdata=newdata.example)
plot(model$finalModel)
predict(model,newdata=newdata.example, uniform=TRUE)
plot(model$finalModel, uniform=TRUE)
text(modFit$finalModel,use.n=TRUE,all=TRUE, cex=0.6)
text(model$finalModel,use.n=TRUE,all=TRUE, cex=0.6)
plot(model$finalModel, uniform=TRUE)
plot(model$finalModel, uniform=TRUE, scale = 0.5)
plot(model$finalModel, uniform=TRUE, panel.height = 40)
plot(model$finalModel, uniform=TRUE)
plot(model$finalModel, uniform=TRUE)
text(modFit$finalModel,use.n=TRUE,all=TRUE, cex=0.6)
text(model$finalModel,use.n=TRUE,all=TRUE, cex=0.6)
model$finalModel
library(pgmm)
install.packages("pgmn")
setwd("..")
getwd()
setwd("~/Coursera/PracticalMachineLearning/Week3/Quiz/")
list.files()
olive <- load(file = "olive.rda")
model2 <- train(Area ~.,method="rpart",data = olive)
data(olive)
View(olive)
load("olive.rda")
model2 <- train(Area ~.,method="rpart",data = olive)
newdata = as.data.frame(t(colMeans(olive)))
preds <- predict(model2, newdata=newdata)
predict(model2, newdata=newdata)
View(olive)
library(ElemStatLearn)
install.packages("ElemStatLearn")
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
View(trainSA)
model3 <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method="glm", family="binomial")
model3 <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method="glm", family="binomial", data=trainSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$chd,predict(model3,trainSA))
missClass(testSA$chd,predict(model3,testSA))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
View(vowel.train)
vowel.train <- as.factor(vowel.train)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
modRF <- train(y~ .,data=vowel.train,method="rf",prox=TRUE)
varImp(modRF)
